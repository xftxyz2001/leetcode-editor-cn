### 解题思路

此题有很多种解法，常见的有通过**数组**或者**哈希表**记录每个字母是否出现过，但是都需要额外的数据结构。最好的方法是使用**位运算**来处理，已知本题字符串超过26必为false，因此我们可以使用一个 32 位的二进制数 **num** 完美地替代哈希表。**num** 实际为int型，我们每次对**num**进行左移来获取相应的位，本题的解法重点就在于理解两行代码，分别是`(num & (1 << index)) != 0` 以及 `num |= (1 << index)`，读者可先看完代码，有不理解的再看下我重点讲解的两行代码。
1. 首先先弄清楚 `1 << index`，它表示左移 index 位，以 8 位二进制数为例

* 

```
// 二进制数：1111 1111
// 对应的每位的值： 128 64 32 16  8 4 2 1
index    1 << index                   解释
  0    0000 0001 << 0       1左移 0 位为 0000 0001 = 1
  1    0000 0001 << 1       1左移 1 位为 0000 0010 = 2
  2    0000 0001 << 2       1左移 2 位为 0000 0100 = 4
  3    0000 0001 << 3       1左移 3 位为 0000 1000 = 8
                      ......
  7    0000 0001 << 7       1左移 7 位为 1000 0000 = 128
```

2. 研究 `num & (1 << index)`
   首先`1 << index` 由 一个 1 和多个 0 组成，num 是 int 型，假设 index = 1，即将 1 左移一位，此时` 1 << index` 为 ... 0000 0010，任何数 **&** 0 都为 0，所以`num & (1 << 1)`表示的是 num 化为二进制后的第二位与 `1 << index` 的第二位 & 的结果。

- 假设 num 为 0， 则 (... 0000 0000 & ... 0000 0010) = 0，从哈希表的角度看就是 num 的第二位未被使用，假设位数对应26个小写字母，第二位为b，即hash中不存在b;
- 假设 num 为 2，则 (... 0000 0010 & ... 0000 0010) = 0，从哈希表的角度看就是 num 的第二位已被使用，假设位数对应26个小写字母，第二位为b，即hash中已存在b;

3. 研究 `num |= (1 << index)`

* 

```
// 位的|（或）运算
   num    | 1 << index
    0     |     1     = 1
0000 0000 | 0000 0001 = 1

    1     |     1     = 1
0000 0001 | 0000 0001 = 1

    2     |     1     = 3
0000 0010 | 0000 0001 = 3
```

当 num = 2 时，表明字母 b 已出现过，当 index = 0，1 << index 表示左移 0 位，对应字母 a，此时`num |= (1 << index)` 为 3，从哈希表的角度来看，此时 num 相当于已存在字母 a 和 b， 此时 num & (1 << 0) 为 1 不等于 0 ，表明字母 a 已经存在，返回false。

### 代码

* java

```java
class Solution {
    boolean isUnique(String str) {
        int len = str.length();
        if (len > 26) { // 字符串超过26必为false
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a'; // 取得c的索引，a 对应 0，b 对应 1，z 对应 25
            if ((num & (1 << index)) != 0) { // 不等于 0，表示某个字母已出现过
            // 注意：不能写成 (num & (1 << index)) == 1，因为存在 0000 00010 & 0000 0010 == 2等情况
                return false;
            } else { // 若为0，将 1 << index 对应的字符加入num中，即原来num = 2
            // 表示num中包含字母 b，此时 index = 0， 1 << index 表示字母 a
            // num |= (1 << index) 为 3（... 0000 0011），表示将 a 也加入num中，
            // 此时num中包含 a 和 b ，若再遇到 index = 0 的情况，num & (1 << index) == 1 不等于 0，
            // 表示 a 已存在，返回false
                num |= (1 << index);
            }
        }
        return true;
    }
}
```

