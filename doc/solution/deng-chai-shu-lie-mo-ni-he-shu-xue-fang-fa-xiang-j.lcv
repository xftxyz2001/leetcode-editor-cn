拿到这道题,感觉有点绕,仔细分析发现`arr[i] = (2 * i) + 1 (0 <= i < n)`是典型的等差数列(1,3,5,7,9...).
根据等差数列的求和公式,很容易求出数组`arr`的元素总和是`n^2`.
题设中说每次操作选出两个下标`x y`使`arr[x]`减一`arr[y]`加一.换句话说,无论怎样选择`x y`,无论操作多少次,数组的总和不会变.
题设又保证数组中所有元素最终可以全部相等.
那我们假设最终所有元素等于`a`那么`n*a == n^2`,所以`a == n`,也就是说最终数组元素都是n.其实`n`是数组的平均值.知道最终元素都是`n`后,通过从数组起始和末尾下标开始向中间遍历,就可以到达操作数最小.
假设左边的下标是`i ((2 * i) + 1 < n)`那么相应右边的下标是`n - i`.相应两个元素值与`n`的差都是`n - 1 + 2 * i`.所以我们只要计算数组中值小于`n`的元素与`n`的差的总和,就得到最小操作数了.

### 代码实现

* c++

```c++
 int minOperations(int n) {
    int operation = 0;
    for(int i = 1; i < n ; i += 2) {
        operation += (n - i);
    }
    return operation;
}
// 时间复杂度是O(n) 空间复杂度是O(1)
```

因为是等差数列,很可能找到一个数学公式,用`O(1)`的时间复杂度解决.
先举几个简单的例子找找规律
- n=3 最小操作数是 2
- n=4 最小操作数是 1 + 3
- n=5 最小操作数是 2 + 4
- n=6 最小操作数是 1 + 3 + 5
- n=7 最小操作数是 2 + 4 + 6

果然有规律:
当`n`是偶数的时候,最小操作数是`1 + 3 + 5 + ... + n-1 = n*n/4`
当`n`是奇数的时候,最小操作数是`2 + 4 + ... + n-1 = (n*n - 1) / 4`

> 注意: 上面的求和公式都是数学形式

那能不能再简单一点呢? 如果用整除代替数学中的除法,可以将`(n*n - 1) / 4`修改成`n*n/4`,因为1整除4为0不影响最后的结果.
所以有了下面的代码,是不是很酷 :)

### 代码

* c++

```c++
 int minOperations(int n) {
     reutrn n * n / 4;
}
// 时空复杂度都是 O(1)
```

觉得文章不错的话,点个赞呗~
如果发现文章有问题,烦请留言交流,谢谢大家.

#### 全文完

